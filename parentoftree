#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#define MAX 100

int visited[MAX] = { 0 };
int parent[MAX] = { 0 };

typedef struct {
    int n;             // 노드의 개수
    int add[MAX][MAX]; // 부모노드와 정점을 입력 받을 배열
} GraphType;

void init_g(GraphType* g) {
    int r, c;
    g->n = 0;          //노드의 개수를 0으로 초기화
    for (r = 0; r < MAX; r++)   // 배열의 공간 확보
        for (c = 0; c < MAX; c++)
            g->add[r][c] = 0;
}


void parents(GraphType* g, int vertex) {    //노드의 개수와 정점을 입력 받을 배열, 정점
    int i;
    visited[vertex] = 1;                 //부모 노드 방문
    for (i = 1; i <= g->n; i++) {        //노드의 개수만큼 방문
        if (!visited[i] && g->add[vertex][i]) { //부모 노드이면 parent에 저장
            parent[i] = vertex;
            parents(g, i);                     //재귀 호출 함수
        }
    }
}

int main() {
    int n;
    int i;
    int p, q;
    GraphType g;

    init_g(&g); //그래프 구조체 만듬

    scanf("%d", &n);        //노드 개수 입력 받음
    g.n = n;                //구조체의 노드 개수 설정
    for (i = 0; i < n - 1; i++) {//노드의 개수만큼 수를 입력받음 , 정점을 연결시킴
        scanf("%d %d", &p, &q);
        g.add[p][q] = g.add[q][p] = 1; //간선 삽입
    }


    parents(&g, 1);         //트리의 루트는 1**

    for (i = 2; i <= n; i++)
        printf("%d\n", parent[i]); //1을 제외한 각 노드의 부모노드 출력

    return 0;
}
